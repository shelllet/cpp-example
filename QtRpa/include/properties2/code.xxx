#pragma once

#include "composite_property.h"
namespace shelllet {
	namespace properties {
		class CodePrivate;
		class Code : public CompositeProperty
		{
			//friend class boost::serialization::access;

			//template<class Archive>
			//void save(Archive& ar, const unsigned int version) const
			//{
			////	ar& boost::serialization::base_object<const CompositeProperty>(*this);
			//	//QByteArray bytes = toData();
			//	ar << toData();
			//}

			//template<class Archive>
			//void load(Archive& ar, const unsigned int version)
			//{
			////	ar >> boost::serialization::base_object<CompositeProperty>(*this);
			//	QByteArray bytes;
			//	ar >> bytes;
			//	fromData(bytes);
			//}

			/*template<class Archive>
			void serialize(Archive& ar, const unsigned int version)
			{
				boost::serialization::split_member(ar, *this, version);
			}*/
			//BOOST_SERIALIZATION_SPLIT_FREE(Print)
			Q_OBJECT
				Q_DECLARE_PRIVATE(Code)
				Q_PROPERTY(String code READ code WRITE setCode)
		public:
			//	Print(QObject* parent = nullptr);
			Q_INVOKABLE Code(const pugi::xml_node& prop = pugi::xml_node(), QObject* parent = nullptr);

			/*Q_INVOKABLE	print(QObject* parent = nullptr);*/


			//std::unique_ptr<pugi::xml_document> getNode() ;


			String code() const;

			void setCode(const String& filename);


			void getCode(std::ostringstream& oss) override;




			//QByteArray toData() const override;





			void getDefines(std::ostringstream& oss) override;







			//void fromData(const QByteArray& data) override;

		protected:
			//virtual void toXml(pugi::xml_node& node);
			//virtual void fromXml(const pugi::xml_node& node);
			virtual QtProperty* getInput(QtTreePropertyBrowser* browser);


		};
	}
}

Q_DECLARE_METATYPE(shelllet::properties::Code*)
