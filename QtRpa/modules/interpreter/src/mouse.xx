#include "interpreter/framework.h"
#include "interpreter/mouse.h"
#include "windows.h"
namespace shelllet {

	namespace interpreter {


		class MousePrivate : public ObjectPrivate {
		public:
			HHOOK hhk;

		};
	}

}

shelllet::interpreter::Mouse::Mouse()
	: Mouse(*new MousePrivate)
{
}

shelllet::interpreter::Mouse::Mouse(MousePrivate& d)
	: Object(d, nullptr)
{

}




void shelllet::interpreter::Mouse::Move(int x, int y)
{
	INPUT  input = { 0 };
	input.type = INPUT_MOUSE;
	input.mi.dwFlags = MOUSEEVENTF_MOVE | MOUSEEVENTF_VIRTUALDESK | MOUSEEVENTF_ABSOLUTE;
	input.mi.mouseData = 0;
	input.mi.time = 0;
	input.mi.dwExtraInfo = 0;
	//The cursor is divided into 65535 pieces in the screen
	input.mi.dx = std::ceil(x * (65535.0f / (::GetSystemMetrics(SM_CXSCREEN) - 1)));
	input.mi.dy = std::ceil(y * (65535.0f / (::GetSystemMetrics(SM_CYSCREEN) - 1)));

	Invoke<&::SendInput>(1, &input, sizeof(INPUT));
}

void shelllet::interpreter::Mouse::Click()
{
	INPUT input = { 0 };
	input.type = INPUT_MOUSE;
	input.mi.dwFlags = MOUSEEVENTF_LEFTDOWN;
	Invoke< &::SendInput>(1, &input, sizeof(INPUT));

	std::random_device gen;
	std::uniform_int_distribution<> dist{ 10, 50 };
	std::this_thread::sleep_for(std::chrono::milliseconds(dist(gen)));

	::ZeroMemory(&input, sizeof(INPUT));
	input.type = INPUT_MOUSE;
	input.mi.dwFlags = MOUSEEVENTF_LEFTUP;
	Invoke<&::SendInput>(1, &input, sizeof(INPUT));
}

void shelllet::interpreter::Mouse::RightClick()
{
	INPUT  input = { 0 };
	input.type = INPUT_MOUSE;
	input.mi.dwFlags = MOUSEEVENTF_RIGHTDOWN;

	Invoke<&::SendInput>(1, &input, sizeof(INPUT));

	::ZeroMemory(&input, sizeof(INPUT));
	input.type = INPUT_MOUSE;
	input.mi.dwFlags = MOUSEEVENTF_RIGHTUP;
	Invoke<&::SendInput>(1, &input, sizeof(INPUT));
}

void shelllet::interpreter::Mouse::MoveAndClick(int x, int y)
{
	Move(x, y);
	std::random_device gen;
	std::uniform_int_distribution<> dist{ 100, 200 };
	std::this_thread::sleep_for(std::chrono::milliseconds(dist(gen)));
	Click();
}

void shelllet::interpreter::Mouse::InstallHook()
{
	if (Mouse::hhk.first && !Invoke<&::UnhookWindowsHookEx>(Mouse::hhk.first))
		return;

	Mouse::hhk = std::make_pair(Invoke<&::SetWindowsHookEx>(WH_MOUSE_LL, [](int nCode, WPARAM wParam, LPARAM lParam) -> LRESULT
	{
		v8::Isolate* isolate = v8::Isolate::GetCurrent();
		V8_CREATE_LOCAL_LOCKER_CONTEXT_BY_ISOLATE(isolate)
		{
			if (nCode == HC_ACTION)
			{
				if (!Mouse::hhk.second.IsEmpty())
				{
					v8::Local<v8::Value> argv[] = { v8::Int32::New(isolate, wParam),  Mouse::Convert(context, reinterpret_cast<LPMSLLHOOKSTRUCT>(lParam)) };

					Mouse::hhk.second.Get(isolate)->Call(context, context->Global(), std::size(argv), argv);
				}
			}

			return ::CallNextHookEx(NULL, nCode, wParam, lParam);
		}
		V8_CREATE_LOCAL_CONTEXT_END
	}, ::GetModuleHandle(NULL), 0), v8::Persistent<v8::Function, v8::CopyablePersistentTraits<v8::Function>>(isolate, fn));
}

BOOL shelllet::interpreter::Mouse::RemoveHook()
{
	auto ret = Invoke<&::UnhookWindowsHookEx>(Mouse::hhk.first);
	Mouse::hhk.first = nullptr;
	return ret;
}
