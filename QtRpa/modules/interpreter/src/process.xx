#include "interpreter/process.h"
#include "boost/range.hpp"
#include "boost/range/adaptors.hpp"
#include "boost/range/adaptor/transformed.hpp"
bool shelllet::interpreter::Process::Start(const String& filename, const Vector<String>& args)
{
	const char* quoted = R"(")";
	QString fixed = QString::fromStdString(file);
	if (fixed.contains(" ")) {
		if (!fixed.startsWith(quoted)) {
			fixed = quoted + fixed;
		}

		if (!fixed.endsWith(quoted)) {
			fixed = fixed + quoted;
		}
	}

	if (args.empty()) {
		return QProcess::startDetached(fixed);
	}
	QVector<QString> arguments(args.size());
	std::for_each(args.begin(), args.end(), [&arguments](const std::string& arg) {
		arguments.push_back(QString::fromStdString(arg));
	});
	return QProcess::startDetached(fixed, QStringList::fromVector(arguments));
}


BOOL shelllet::windows::__Process::EnumModule(DWORD th32ProcessID, const std::function<bool(LPMODULEENTRY32W)>& cb)
{
	HANDLE hSnapshot = Invoke<&::CreateToolhelp32Snapshot>(TH32CS_SNAPMODULE | TH32CS_SNAPMODULE32, th32ProcessID);
	if (hSnapshot == INVALID_HANDLE_VALUE) {
		return FALSE;
	}

	BOOST_SCOPE_EXIT(hSnapshot) {
		Invoke<&::CloseHandle>(hSnapshot);
	}BOOST_SCOPE_EXIT_END;

	MODULEENTRY32W entry = { 0 };
	entry.dwSize = sizeof(MODULEENTRY32W);

	if (!Invoke<&::Module32FirstW>(hSnapshot, &entry)) {
		return FALSE;
	}

	do {
		if (!cb || !cb(&entry)) break;
	} while (Invoke<&::Module32NextW>(hSnapshot, &entry));

	return ::GetLastError() != ERROR_NO_MORE_FILES;
}

BOOL shelllet::windows::__Process::EnumProcess(const std::function<bool(LPPROCESSENTRY32W)>& cb)
{
	HANDLE hSnapshot = Invoke<&::CreateToolhelp32Snapshot>(TH32CS_SNAPPROCESS, 0);
	if (hSnapshot == INVALID_HANDLE_VALUE) {
		return FALSE;
	}

	BOOST_SCOPE_EXIT(hSnapshot) {
		Invoke<&::CloseHandle>(hSnapshot);
	}BOOST_SCOPE_EXIT_END;

	PROCESSENTRY32W entry = { 0 };
	entry.dwSize = sizeof(PROCESSENTRY32W);

	if (!Invoke<&::Process32FirstW>(hSnapshot, &entry)) {
		return FALSE;
	}

	do {
		if (!cb || !cb(&entry)) break;
	} while (Invoke<&::Process32NextW>(hSnapshot, &entry));

	return ::GetLastError() != ERROR_NO_MORE_FILES;
}

BOOL shelllet::windows::__Process::EnumThread(const std::function<bool(LPTHREADENTRY32)>& cb)
{
	HANDLE hSnapshot = Invoke<&::CreateToolhelp32Snapshot>(TH32CS_SNAPTHREAD, 0);
	if (hSnapshot == INVALID_HANDLE_VALUE) {
		return FALSE;
	}

	BOOST_SCOPE_EXIT(hSnapshot) {
		Invoke<&::CloseHandle>(hSnapshot);
	}BOOST_SCOPE_EXIT_END;

	THREADENTRY32 entry = { 0 };
	entry.dwSize = sizeof(THREADENTRY32);

	if (!Invoke<&::Thread32First>(hSnapshot, &entry)) {
		return FALSE;
	}

	do {
		if (!cb || !cb(&entry)) break;
	} while (Invoke<&::Thread32Next>(hSnapshot, &entry));

	return ::GetLastError() != ERROR_NO_MORE_FILES;
}

BOOL shelllet::windows::__Process::RunAs(const std::wstring& username, const std::wstring& password, const std::wstring& application, const std::wstring& commandLine, const std::wstring& currentDirectory)
{
	STARTUPINFOW siw = { 0 };
	siw.cb = sizeof(STARTUPINFOW);

	std::wstring wch = commandLine;
	int maxSize = wch.length() > 1024 ? 1024 : wch.length(); // The maximum length of this string is 1024 characters.
	std::vector<wchar_t> buffer(maxSize, 0);
	std::wmemcpy(buffer.data(), wch.c_str(), maxSize);
	PROCESS_INFORMATION processInformation = { 0 };
	// including the Unicode terminating null character
	if (Invoke<&::CreateProcessWithLogonW>(
		username.c_str(),
		nullptr,                                                // change to L"." to use local account database only
		password.c_str(),
		LOGON_WITH_PROFILE,
		application.c_str(),
		buffer.data(),
		CREATE_UNICODE_ENVIRONMENT, nullptr, currentDirectory.empty() ? nullptr : currentDirectory.c_str(), &siw, &processInformation)) {
		::CloseHandle(siw.hStdError);
		::CloseHandle(siw.hStdInput);
		::CloseHandle(siw.hStdOutput);
		::CloseHandle(processInformation.hThread);
		::CloseHandle(processInformation.hProcess);
		return TRUE;
	}
	return FALSE;
}

BOOL shelllet::windows::__Process::CreateProcessWithToken(HANDLE hToken, const std::wstring& application, const std::wstring& commandLine, const std::wstring& currentDirectory)
{
	STARTUPINFOW siw = { 0 };
	siw.cb = sizeof(STARTUPINFOW);

	SECURITY_ATTRIBUTES security = { sizeof(SECURITY_ATTRIBUTES), NULL, TRUE };

	std::wstring wch = commandLine;
	int maxSize = wch.length() > 1024 ? 1024 : wch.length(); // The maximum length of this string is 1024 characters.
	std::vector<wchar_t> buffer(maxSize, 0);
	std::wmemcpy(buffer.data(), wch.c_str(), maxSize);
	PROCESS_INFORMATION processInformation = { 0 };

	if (Invoke < &::CreateProcessWithTokenW>(hToken, LOGON_WITH_PROFILE,
		application.c_str(),
		buffer.data(),
		NORMAL_PRIORITY_CLASS, // dwCreationFlags
		nullptr,
		currentDirectory.empty() ? nullptr : currentDirectory.c_str(),
		&siw, &processInformation)) {
		::CloseHandle(siw.hStdError);
		::CloseHandle(siw.hStdInput);
		::CloseHandle(siw.hStdOutput);
		::CloseHandle(processInformation.hThread);
		::CloseHandle(processInformation.hProcess);
		return TRUE;
	}
	return FALSE;
}

HANDLE shelllet::windows::__Process::OpenProcessToken(DWORD dwProcessId, DWORD desiredAccess /*= TOKEN_QUERY | TOKEN_DUPLICATE*/)
{
	HANDLE hProcess = Invoke<&::OpenProcess>(PROCESS_QUERY_LIMITED_INFORMATION, FALSE, dwProcessId);
	if (hProcess == NULL) {
		return INVALID_HANDLE_VALUE;
	}

	BOOST_SCOPE_EXIT(hProcess) {
		::CloseHandle(hProcess);
	}BOOST_SCOPE_EXIT_END
		;
	HANDLE hToken;
	if (!Invoke<&::OpenProcessToken>(hProcess, TOKEN_QUERY | TOKEN_DUPLICATE, &hToken)) {
		return INVALID_HANDLE_VALUE;
	}
	return hToken;
}

HANDLE shelllet::windows::__Process::OpenProcessToken()
{
	HANDLE hToken = INVALID_HANDLE_VALUE;
	if (!Invoke<&::OpenThreadToken>(GetCurrentThread(), TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY, TRUE, &hToken)) {
		if (GetLastError() != ERROR_NO_TOKEN) {
			return FALSE;
		}

		// Retry against process token if no thread token exists.
		if (!Invoke<&::OpenProcessToken>(GetCurrentProcess(), TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY, &hToken)) {
			return FALSE;
		}
	}
	return hToken;
}

BOOL shelllet::windows::__Process::AdjustTokenPrivileges(HANDLE hToken, const std::wstring& name, bool e)
{
	LUID luid;
	TOKEN_PRIVILEGES tp;

	if (!Invoke<&::LookupPrivilegeValueW>(
		nullptr,            // lookup privilege on local system
		name.c_str(),			// privilege to lookup
		&luid)) {       // receives LUID of privilege
		return FALSE;
	}

	tp.PrivilegeCount = 1;
	tp.Privileges[0].Luid = luid;
	tp.Privileges[0].Attributes = e ? SE_PRIVILEGE_ENABLED : 0;

	if (!Invoke<&::AdjustTokenPrivileges>(
		hToken,
		FALSE,
		&tp,
		sizeof(TOKEN_PRIVILEGES),
		nullptr,
		nullptr)) {
		return FALSE;
	}

	if (GetLastError() != ERROR_SUCCESS) {
		return FALSE;
	}
	return TRUE;
}

BOOL shelllet::windows::__Process::RunAsDesktop(const std::wstring& application, const std::wstring& commandLine, const std::wstring& currentDirectory)
{
	// Enable SeIncreaseQuotaPrivilege in this process.  (This won't work if current process is not elevated.)
	{
		HANDLE hToken = OpenProcessToken();
		BOOST_SCOPE_EXIT(hToken) {
			::CloseHandle(hToken);
		}BOOST_SCOPE_EXIT_END;

		if (!AdjustTokenPrivileges(hToken, SE_INCREASE_QUOTA_NAME, true))
			return FALSE;
	}

	// Get an HWND representing the desktop shell.
	// CAVEATS:  This will fail if the shell is not running (crashed or terminated), or the default shell has been
	// replaced with a custom shell.  This also won't return what you probably want if Explorer has been terminated and
	// restarted elevated.
	DWORD dwProcessId = 0;
	{
		HWND hWnd = Invoke<&::GetShellWindow>();
		if (hWnd == NULL) {
			return FALSE;
		}
		// Get the PID of the desktop shell process.
		GetWindowThreadProcessId(hWnd, &dwProcessId);
	}

	// Get the process token of the desktop shell.
	HANDLE hExistingToken = OpenProcessToken(dwProcessId);
	BOOST_SCOPE_EXIT(hExistingToken) {
		CloseHandle(hExistingToken);
	}BOOST_SCOPE_EXIT_END;
	HANDLE hNewToken = NULL;

	// Duplicate the shell's process token to get a primary token.
	// Based on experimentation, this is the minimal set of rights required for CreateProcessWithTokenW (contrary to current documentation).
	const DWORD dwDesiredAccess = TOKEN_QUERY | TOKEN_ASSIGN_PRIMARY | TOKEN_DUPLICATE | TOKEN_ADJUST_DEFAULT | TOKEN_ADJUST_SESSIONID;
	if (!Invoke<&::DuplicateTokenEx>(hExistingToken, dwDesiredAccess, nullptr, SecurityImpersonation, TokenPrimary, &hNewToken)) {
		return FALSE;
	}

	BOOST_SCOPE_EXIT(hNewToken) {
		CloseHandle(hNewToken);
	}BOOST_SCOPE_EXIT_END;

	return CreateProcessWithToken(hNewToken, application, commandLine, currentDirectory);
}

std::pair<std::wstring, std::wstring> shelllet::windows::__Process::GetUserFromProcess(DWORD dwProcessId)
{
	PTOKEN_USER tokenUser = TokenInformation<PTOKEN_USER, TokenUser>(dwProcessId);

	BOOST_SCOPE_EXIT(tokenUser) {
		::HeapFree(GetProcessHeap(), 0, (LPVOID)tokenUser);
	}BOOST_SCOPE_EXIT_END;

	SID_NAME_USE peUse;
	DWORD cchName = 0;
	DWORD cchReferencedDomainName = 0;

	if (!Invoke<&::LookupAccountSidW>(nullptr, tokenUser->User.Sid, nullptr, &cchName, nullptr, &cchReferencedDomainName, &peUse)) {
		return std::make_pair(L"", L"");
	}

	std::vector<wchar_t> name(cchName);
	std::vector<wchar_t> referencedDomainName(cchReferencedDomainName);

	if (!Invoke<&::LookupAccountSidW>(nullptr, tokenUser->User.Sid, name.data(), nullptr, referencedDomainName.data(), nullptr, &peUse)) {
		return std::make_pair(L"", L"");
	}

	return std::make_pair(std::wstring(name.begin(), name.end()), std::wstring(referencedDomainName.begin(), referencedDomainName.end()));
}

void shelllet::interpreter::Process::Embedded(py::module_& m)
{
	const char* name = "Process";
	py::class_<shelllet::interpreter::StringIO>(m, name)
		.def(py::init<>())
		.def_static("start", [](py::args args, py::kwargs kwargs) {

		Vector<String> args;
	/*	for (const auto& iter = kwargs.cbegin(); iter != kwargs.cend(); ++iter)
		{
			args.push_back(iter.
		}*/

		boost::algorithm::join(kwargs | boost::adaptors::map_keys,	"= ");
		Start(py::str(args[0]), args);
	})
		;
}
